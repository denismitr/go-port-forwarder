// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	io "io"

	httpstream "k8s.io/apimachinery/pkg/util/httpstream"

	mock "github.com/stretchr/testify/mock"
)

// portForwarder is an autogenerated mock type for the portForwarder type
type portForwarder struct {
	mock.Mock
}

type portForwarder_Expecter struct {
	mock *mock.Mock
}

func (_m *portForwarder) EXPECT() *portForwarder_Expecter {
	return &portForwarder_Expecter{mock: &_m.Mock}
}

// forward provides a mock function with given fields: dialer, ports, stopChan, readyChan, out, errOut
func (_m *portForwarder) forward(dialer httpstream.Dialer, ports []string, stopChan <-chan struct{}, readyChan chan struct{}, out io.Writer, errOut io.Writer) error {
	ret := _m.Called(dialer, ports, stopChan, readyChan, out, errOut)

	var r0 error
	if rf, ok := ret.Get(0).(func(httpstream.Dialer, []string, <-chan struct{}, chan struct{}, io.Writer, io.Writer) error); ok {
		r0 = rf(dialer, ports, stopChan, readyChan, out, errOut)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// portForwarder_forward_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'forward'
type portForwarder_forward_Call struct {
	*mock.Call
}

// forward is a helper method to define mock.On call
//   - dialer httpstream.Dialer
//   - ports []string
//   - stopChan <-chan struct{}
//   - readyChan chan struct{}
//   - out io.Writer
//   - errOut io.Writer
func (_e *portForwarder_Expecter) forward(dialer interface{}, ports interface{}, stopChan interface{}, readyChan interface{}, out interface{}, errOut interface{}) *portForwarder_forward_Call {
	return &portForwarder_forward_Call{Call: _e.mock.On("forward", dialer, ports, stopChan, readyChan, out, errOut)}
}

func (_c *portForwarder_forward_Call) Run(run func(dialer httpstream.Dialer, ports []string, stopChan <-chan struct{}, readyChan chan struct{}, out io.Writer, errOut io.Writer)) *portForwarder_forward_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(httpstream.Dialer), args[1].([]string), args[2].(<-chan struct{}), args[3].(chan struct{}), args[4].(io.Writer), args[5].(io.Writer))
	})
	return _c
}

func (_c *portForwarder_forward_Call) Return(_a0 error) *portForwarder_forward_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *portForwarder_forward_Call) RunAndReturn(run func(httpstream.Dialer, []string, <-chan struct{}, chan struct{}, io.Writer, io.Writer) error) *portForwarder_forward_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTnewPortForwarder interface {
	mock.TestingT
	Cleanup(func())
}

// newPortForwarder creates a new instance of portForwarder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newPortForwarder(t mockConstructorTestingTnewPortForwarder) *portForwarder {
	mock := &portForwarder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
