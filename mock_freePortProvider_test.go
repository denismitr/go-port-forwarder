// Code generated by mockery v2.20.2. DO NOT EDIT.

package portforwarder

import mock "github.com/stretchr/testify/mock"

// mockFreePortProvider is an autogenerated mock type for the freePortProvider type
type mockFreePortProvider struct {
	mock.Mock
}

type mockFreePortProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *mockFreePortProvider) EXPECT() *mockFreePortProvider_Expecter {
	return &mockFreePortProvider_Expecter{mock: &_m.Mock}
}

// getFreePort provides a mock function with given fields:
func (_m *mockFreePortProvider) getFreePort() (uint, error) {
	ret := _m.Called()

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockFreePortProvider_getFreePort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getFreePort'
type mockFreePortProvider_getFreePort_Call struct {
	*mock.Call
}

// getFreePort is a helper method to define mock.On call
func (_e *mockFreePortProvider_Expecter) getFreePort() *mockFreePortProvider_getFreePort_Call {
	return &mockFreePortProvider_getFreePort_Call{Call: _e.mock.On("getFreePort")}
}

func (_c *mockFreePortProvider_getFreePort_Call) Run(run func()) *mockFreePortProvider_getFreePort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockFreePortProvider_getFreePort_Call) Return(_a0 uint, _a1 error) *mockFreePortProvider_getFreePort_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockFreePortProvider_getFreePort_Call) RunAndReturn(run func() (uint, error)) *mockFreePortProvider_getFreePort_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTnewMockFreePortProvider interface {
	mock.TestingT
	Cleanup(func())
}

// newMockFreePortProvider creates a new instance of mockFreePortProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockFreePortProvider(t mockConstructorTestingTnewMockFreePortProvider) *mockFreePortProvider {
	mock := &mockFreePortProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
